// Copyright Â© 2016 NAME HERE <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "constellation",
	Short: "Run a constellation of rkt pods",
	Long: `Run a constellation of rkt pods in a predifined order.  
	InterPod networking is managed, as are dependencies and ready-states.`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	//Run: Base,
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

var includeDirs []string

func init() {

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringP("constellationFile", "c", "", "path to a yaml file defining your constellation")
	RootCmd.PersistentFlags().StringP("projectName", "p", "", "an arbitrary name to identify this invocation")
	RootCmd.PersistentFlags().StringSliceP("includeDirs", "I", make([]string, 0), "Directories to look in for files included via the 'require' stanza")
	RootCmd.PersistentFlags().StringSliceP("volumeOverrides", "v", make([]string, 0), "Set this if you want to override the volume locations set in the constellation file.")
	RootCmd.PersistentFlags().StringSliceP("imageOverrides", "i", make([]string, 0), "Set this if you want to override the image versions set in the constellation file")
	RootCmd.PersistentFlags().StringSliceP("hostsEntries", "H", make([]string, 0), "Use this to add any local resources into all of the containers generated by constellation")
	RootCmd.PersistentFlags().Bool("no-color", false, "Disable color output")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	RootCmd.PersistentFlags().BoolP("debug", "d", false, "Help message for toggle")

	// add the values into viper
	viper.BindPFlag("constellationFile", RootCmd.PersistentFlags().Lookup("constellationFile"))
	viper.BindPFlag("projectName", RootCmd.PersistentFlags().Lookup("projectName"))
	viper.BindPFlag("includeDirs", RootCmd.PersistentFlags().Lookup("includeDirs"))
	viper.BindPFlag("volumeOverrides", RootCmd.PersistentFlags().Lookup("volumeOverrides"))
	viper.BindPFlag("hostsEntries", RootCmd.PersistentFlags().Lookup("hostsEntries"))
	viper.BindPFlag("imageOverrides", RootCmd.PersistentFlags().Lookup("imageOverrides"))
	viper.BindPFlag("no-color", RootCmd.PersistentFlags().Lookup("no-color"))
	viper.BindPFlag("debug", RootCmd.PersistentFlags().Lookup("debug"))
}

// do some base configuration
func BaseInit() {
	// generate our config path for our network files
	viper.Set("netConfigPath", fmt.Sprintf("/tmp/constellation-%s", viper.GetString("projectName")))
	// take some actions based on flags
	if viper.GetBool("no-color") {
		color.NoColor = true // disables colorized output
	}

	// we need to do some post-processing here due to this: https://github.com/spf13/viper/issues/200
	for _, entry := range []string{"includeDirs", "volumeOverrides", "imageOverrides", "hostsEntries"} {
		if viper.IsSet(entry) && len(viper.GetString(entry)) != 0 {
			viper.Set(entry, strings.Split(viper.GetString(entry), ","))
		}
	}
}
