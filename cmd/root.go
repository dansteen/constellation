// Copyright Â© 2016 NAME HERE <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"fmt"
	"os"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

var cfgFile string
var podFile string
var includeDirs []string
var projectName string
var noColor bool
var imageOverrides []string
var volumeOverrides []string
var hostsEntries []string

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "constellation",
	Short: "Run a constellation of rkt pods",
	Long: `Run a constellation of rkt pods in a predifined order.  
	InterPod networking is managed, as are dependencies and ready-states.`,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	//	Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

func init() {

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringVarP(&podFile, "constellationFile", "c", "", "path to a yaml file defining your constellation")
	RootCmd.PersistentFlags().StringVarP(&projectName, "projectName", "p", "", "an arbitrary name to identify this invocation")
	RootCmd.PersistentFlags().StringSliceVarP(&includeDirs, "include", "I", make([]string, 0), "Directories to look in for files included via the 'require' stanza")
	RootCmd.PersistentFlags().StringSliceVarP(&volumeOverrides, "volumeOverrides", "v", make([]string, 0), "Set this if you want to override the volume locations set in the constellation file.")
	RootCmd.PersistentFlags().StringSliceVarP(&imageOverrides, "imageOverrides", "i", make([]string, 0), "Set this if you want to override the image versions set in the constellation file")
	RootCmd.PersistentFlags().StringSliceVarP(&hostsEntries, "hostsEntries", "H", make([]string, 0), "Use this to add any local resources into all of the containers generated by constellation")
	RootCmd.PersistentFlags().BoolVar(&noColor, "no-color", false, "Disable color output")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	RootCmd.Flags().BoolP("debug", "d", false, "Help message for toggle")

	// take some actions based on flags
	if noColor {
		color.NoColor = true // disables colorized output
	}
}
